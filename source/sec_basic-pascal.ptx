<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec_counting-binom">
  <title>Pascal's Triangle and Binomial Coefficients</title>




<!-- TODO:

    <p>
      ALONG THE WAY, DISCUSS THE SUM PRINCIPLE AND RECURSION.  MAYBE ALSO THE PRODUCT PRINCIPLE (AS THAT WOULD BE NEEDED FOR COMBINATORIAL PROOFS).
    </p>

    <p>
      STARS AND BARS CAN GO HERE TOO.
    </p> -->


<p>
  Let's start our investigation of combinatorics by examining Pascal's Triangle.  If you are already familiar with this mathematical object, try to see it with fresh eyes.  Look at the triangle as if you have no idea where it comes from.  What do you notice?
</p>

<idx><h>Pascal's triangle</h></idx>
<sidebyside width="100%">

    <image xml:id="pascal-large">
      <latex-image>
        \begin{tikzpicture}
      \def\r{.55}
      \def\lastrow{15}
      \foreach \row in {0,...,\lastrow} {
        \hexbox{\row}{0}{\large 1}
      }
      %fill in the rest of the triangle:
      \foreach \row in {1,...,\lastrow} {
        \pgfmathsetmacro{\entry}{1};
        \foreach \col in {1,...,\row} {
          % iterative formula : val = precval * (row-col+1)/col
          % (+ 0.5 to bypass rounding errors)
          \pgfmathtruncatemacro{\entry}{\entry*((\row-\col+1)/\col)+0.5};
          \global\let\entry=\entry
          \ifnum \entry&lt;100
      \hexbox{\row}{\col}{\large \entry}
          \else \ifnum \entry&lt;1000
      \hexbox{\row}{\col}{\entry}
          \else \ifnum \entry&lt;10000
      \hexbox{\row}{\col}{\footnotesize \entry}
      \else
      \hexbox{\row}{\col}{\scriptsize \entry}
      \fi
          \fi
          \fi
        }
      }
      \node[above] at (0,2) {\Huge Pascal's Triangle};
      \end{tikzpicture}
      </latex-image>
    </image>

</sidebyside>

 <activity>
   <introduction>
    <p>
       Treating Pascal's Triangle as nothing more than a triangular array of numbers, what do you notice about it?  Are there any patterns to the numbers? Try to find some patterns and then see if you can answer (or have already answered) the following:
     </p>
  </introduction>
  <task>
    <p>
      How are the entries in the triangle found?  What would the next row down be?
    </p>
  </task>
  <task>
    <p>
      What is the sum of the entries in the <m>n</m>th row?
    </p>
  </task>
  <task>
    <p>
      What is <m>1 - 5 + 10 - 10 + 5 - 1</m>?  What pattern is this an example of, and does it always work?
    </p>
  </task>
  <task>
    <p>
      What is <m>1 + 3 + 6 + 10 + 15</m>?  What pattern is this an example of, and does it always work?
    </p>
  </task>
  <task>
    <p>
      What is <m>1+ 7 + 15 + 10 + 1</m>?  What pattern is this an example of, and does it always work?
    </p>
  </task>
  <task>
    <p>
      Are there any groups of numbers in the triangle that are particularly recognizable?
    </p>
  </task>
 </activity>

  <p>
    We would like to understand why the patterns you discovered above exist, and to prove that they really do exist everywhere in the triangle.  There are at least two ways we can proceed (and we will try to proceed in both ways to maximize our understanding).  First, we can use notation to describe the entries in the triangle, provide a definition for what each entry is, and prove our results entirely based on these definitions.  Second, we can ascribe some <em>meaning</em> to the entries in the triangle, saying what the numbers represent, and then make arguments about those representations.
  </p>

  <p>
    <!-- weak: -->
    The advantage to pursuing both these approaches is that doing so creates a feedback loop.  A fact we establish using pure symbolic manipulation allows us to conclude something about the real world and what these numbers represent.  That helps us understand the applications better, which in turn might help us make arguments about those applications, which can then establish a purely symbolic fact about the triangle.
  </p>

  <p>
    Let's pause and just for fun consider a few discrete math questions that probably have nothing to do with Pascal's Triangle or each other.  Probably.
  </p>

  <activity xml:id="act-latticepaths">
    <introduction>
      <p>
        The <term>integer lattice</term> is the set of all points in the Cartesian plane for which both the <m>x</m> and <m>y</m> coordinates are integers.
      </p>

      <p>
        A <term>lattice path</term><idx><h>lattice path</h></idx> is one of the shortest possible paths connecting two points on the lattice, moving only horizontally and vertically. For example, here are three possible lattice paths from the points <m>(0,0)</m> to <m>(3,2)</m>:
      </p>
      <sidebyside width="30%" margins="auto">
        <image xml:id="lattice-path-1">
          <latex-image>
            \begin{tikzpicture}
        \draw[very thin, color=gray!50] (-.5,-.5) grid (3.5, 2.5);
        \foreach \x in {0,...,3}
        \foreach \y in {0,...,2}
        \fill (\x,\y) circle (1.5pt);
        \draw (0,0) node[below left] { (0,0)} (3,2) node[above right] { (3,2)};
        \draw[very thick] (0,0) -- (2,0) -- (2,2) -- (3,2);
      \end{tikzpicture}
          </latex-image>
        </image>
        <image xml:id="lattice-path-2">
          <latex-image>
            \begin{tikzpicture}
        \draw[very thin, color=gray!50] (-.5,-.5) grid (3.5, 2.5);
        \foreach \x in {0,...,3}
        \foreach \y in {0,...,2}
        \fill (\x,\y) circle (1.5pt);
        \draw (0,0) node[below left] { (0,0)} (3,2) node[above right] { (3,2)};
        \draw[very thick] (0,0) -- (0,2) -- (3,2);
      \end{tikzpicture}
          </latex-image>
        </image>
        <image xml:id="lattice-path-3">
          <latex-image>
            \begin{tikzpicture}
        \draw[very thin, color=gray!50] (-.5,-.5) grid (3.5, 2.5);
        \foreach \x in {0,...,3}
        \foreach \y in {0,...,2}
        \fill (\x,\y) circle (1.5pt);
        \draw (0,0) node[below left] { (0,0)} (3,2) node[above right] { (3,2)};
        \draw[very thick] (0,0) -- (1,0) -- (1,1) -- (3,1) -- (3,2);
      \end{tikzpicture}
          </latex-image>
        </image>
      </sidebyside>
    </introduction>
    <task>
      <p>
        How many lattice paths are there between <m>(0,0)</m> and <m>(3,1)</m>?  Draw or list them all (you might want to invent some notation for describing a path without drawing it).
      </p>
    </task>
    <task>
      <p>
        How many lattice paths are there between <m>(0,0)</m> and <m>(2,2)</m>? Draw or list them all to be sure.
      </p>
    </task>
    <task>
      <p>
        How many lattice paths are there between <m>(0,0)</m> and <m>(3,2)</m>? How can you be sure?
      </p>
    </task>
  </activity>

  <activity>
    <introduction>
      <p>
        Recall that a <term>subset</term> <m>A</m> of a set <m>B</m> is a set all of whose elements are also elements of <m>B</m>; we write <m>A \subseteq B</m>.  For example, some of the subsets of <m>B = \{1,2,3,4,5\}</m> are <m>\{2,4,5\}</m>, <m>\{1,2,3,4,5\}</m> and <m>\emptyset</m>.  Recall also that the <term>cardinality</term> of a set is simply the number of elements in it.
      </p>

      <p>
        Since we will often consider sets of the form <m>\{1,2,3,\ldots,n\}</m>, let's adopt the notation <m>[n]</m> for this set.
      </p>
    </introduction>
    <task>
      <p>
        Write out all subsets of <m>[3] = \{1,2,3\}</m>.  Then group the subsets by cardinality.  How many subsets have cardinality 0?  How many have cardinality 1?  2? 3?
      </p>
    </task>
    <task>
      <p>
        Write out all subsets of <m>[4]</m>, and determine how many have each possible cardinality.
      </p>
    </task>
    <task>
      <p>
        How many subsets of <m>[5]</m> are there of each cardinality?  Try to answer this questions without writing out all 32 subsets.
      </p>
    </task>
  </activity>


  <activity>
    <introduction>
      <p>
        Some definitions: A <term>bit</term> is either 0 or 1 (bit is short for <q>binary digit</q>).  Thus a <term>bit string</term> is a string of bits.  The <term>length</term> of a bit string is the number of bits in the string; the <term>weight</term> of a bit string is the number of 1's in the string (or equivalently, the sum of the bits). A <term><m>n</m>-bit string</term> means a bit string of length <m>n</m>.
      </p>

      <p>
        We will write <m>\B^n_k</m> to mean the set of all <m>n</m>-bit strings of weight <m>k</m>.  So for example, some of the elements in <m>\B^5_3</m> are,
        <me>
          11100 \qquad 10101 \qquad 01101.
        </me>
      </p>
    </introduction>
    <task>
      <p>
        Write out all <m>3</m>-bit strings.  Group these by weight.  How many strings are there of each weight?
      </p>
    </task>
    <task>
      <p>
        Write out all <m>4</m>-bit strings.  You might want to use the list you had in the previous part as a starting point (how would you do this?).  Again, group these strings by weight and see how many there are of each type.
      </p>
    </task>
    <task>
      <p>
        How many <m>5</m>-bit strings of weight 3 are there?  List all of these, and say how they relate to some of the <m>4</m>-bit strings you found above.
      </p>
    </task>
  </activity>

  <p>
    We are not quite ready to consider the algebraic approach yet, but here is a fun algebra exercise.
  </p>

  <activity>
    <introduction>
      <p>
        Multiply out (and collect like terms): <m>(x+y)^3</m>.  Repeat for <m>(x+y)^4</m> and <m>(x+y)^5</m>.
      </p>
    </introduction>
    <task>
      <p>
        What is the coefficient of <m>x^3y^2</m> in the expansion of <m>(x+y)^5</m>?
      </p>
    </task>
    <task>
      <p>
        What are the coefficients of <m>x^2y^2</m> and <m>x^3y</m> in the expansion of <m>(x+y)^4</m>?  How does this relate to the previous question?  Why does this make sense?
      </p>
    </task>
    <task>
      <p>
        If you believe the connection between coefficients and Pascal's triangle you have discovered above, find the coefficient of <m>x^7y^4</m> in the expansion of <m>(x+y)^{11}</m> using Pascal's triangle.
      </p>
    </task>
  </activity>

  <p>
    Hopefully by now you have some questions that are begging to be answered.  Here are two that we will focus on specifically:
    <ol>
      <li>
        <p>
          Why are the answers to all the counting questions above the same as each other?
        </p>
      </li>
      <li>
        <p>
          Why are the answers to all the counting questions above numbers in Pascal's triangle?
        </p>
      </li>
    </ol>
  </p>

  <p>
    We could answer the first question by answering the second: if we can say why each answer is a particular entry in Pascal's triangle, then we know two answers will be equal because they are in the same place on the triangle.  But we can do better.  In fact, we should be able to explain why these counting questions correspond to each other without knowing <em>any</em> of the answers.
  </p>

  <activity>
    <task>
      <p>
        Explain why the number of lattice paths from <m>(0,0)</m> to <m>(k,n-k)</m> is the same as number of <m>n</m>-bit strings of weight <m>k</m>. You do not need to give a formal proof here, just explain the idea.
      </p>
    </task>
    <task>
      <p>
        Explain why the number of <m>n</m>-bit strings of weight <m>k</m> is the same as the number of <m>k</m>-element subsets of <m>[n] = \{1,2,3,\ldots, n\}</m>.   Again, an informal argument is fine.
      </p>
    </task>
    <task>
      <statement>
        <p>
          Explain why the number of <m>k</m>-element subsets of <m>[n]</m> is the same as the coefficient of <m>x^ky^{n-k}</m> in the expansion of <m>(x+y)^n</m>.
        </p>
      </statement>
      <hint>
        <p>
          This is a little harder.  It might help to notice that there is really nothing special about <m>[n]</m> except that it contains <m>n</m> elements.  In fact, what can you say about the number of <m>k</m>-element subsets of <em>any</em> <m>n</m>-element set?  Then, what <m>n</m>-element set would we look at when expanding <m>(x+y)^n</m>?
        </p>
      </hint>
    </task>
  </activity>

  <p>
    Are you satisfied with the explanations you gave above?  Do you think they would count as a formal mathematical proof that the counting questions have the same answer?  One way to make this sort of an argument more precise is to involve precisely defined mathematical objects.
  </p>

  <activity>
    <introduction>
      <p>
        Consider functions <m>f:X \to Y</m> where <m>X</m> and <m>Y</m> are finite sets.  In fact, let's say <m>X = [4]</m>. If you need a refresher on basic ideas about functions, check out <xref ref="sec_background-functions"/>.
      </p>
    </introduction>
    <task>
      <p>
        Can you say anything at all about <m>Y</m> if you know there is some function <m>f:X \to Y</m>?  Give some examples of sets <m>Y</m> and functions <m>f</m>.
      </p>
    </task>
    <task>
      <p>
        What if <m>f:X \to Y</m> is <em>injective</em> (in other words, one-to-one)?  Which of the examples you found above no longer work?  What can you conclude about <m>Y</m>?
      </p>
    </task>
    <task>
      <p>
        What if <m>f:X \to Y</m> is <em>surjective</em> (i.e., onto)?  Now what can you say about <m>Y</m>?
      </p>
    </task>
    <task>
      <p>
        What if <m>f:X\to Y</m> is <em>bijective</em> (so both injective and surjective)?  State the general principle.
      </p>
    </task>
  </activity>


  <p>
    The previous activity was meant to help you discover what is usually called the <term>bijection principle</term>: <em>Two sets <m>X</m> and <m>Y</m> have the same cardinality if and only if there is a bijection <m>f:X \to Y</m></em>.
  </p>

  <p>
    If you want to prove that two sets have the same number of elements, all that is required is to define a function from one set to the other, and prove that the function is a bijection.  For us, those two sets will be the set of outcomes we are counting.  So for example, we can show that the <em>set</em> of <m>n</m>-bit strings of weight <m>k</m> has the same cardinality as the <em>set</em> of <m>k</m>-element subsets of <m>[n]</m>.  This will prove that the counting questions, <q>how many <m>n</m>-bit strings of weight <m>k</m> are there?</q> and, <q>how many <m>k</m>-element subsets of <m>[n]</m> are there?</q> have the same answer.
  </p>

  <p>

  </p>

  <example>
    <statement>
      <p>
        Define a bijection <m>f:X \to Y</m> where <m>X</m> is the set of lattice paths from <m>(0,0)</m> to <m>(k,n-k)</m> and <m>Y</m> is the set of <m>n</m>-bit strings of weight <m>k</m>. Prove that <m>f</m> really is a bijection.
      </p>
    </statement>
    <solution>
      <p>
        This really comes down to how to represent the elements of the set <m>X</m>. We represent a lattice path from <m>(0,0)</m> to <m>(k, n-k)</m> as a sequence of <em>R</em>'s and <em>U</em>'s, representing a step to the right or a step up.  Note that this means that each lattice path will be a sequence containing a total of <m>n</m> symbols, of which <m>k</m> will be <em>R</em>'s. 
      </p>

      <p>
        Now we can define the bijection.  The function <m>f</m> takes a string of <em>R</em>'s and <em>U</em>'s, and replaces each <em>R</em> with a 1 and each <em>U</em> with a 0.  
      </p>

      <p>
        To prove this is a bijection, there are four things we need to check: 
        <ol>
          <li>
            That <m>f(x)</m> is defined for each <m>x \in X</m> (i.e., every lattice path is sent to some <m>n</m>-bit string of weight <m>k</m>).</li>
          <li>
            That <m>f(x)</m> is <em>uniquely</em> defined for each <m>x \in X</m> (i.e., no lattice path is sent to more than one bit string).</li>
          <li>
            That every <m>y \in Y</m> is the image of at least one <m>x \in X</m> (i.e., that every <m>n</m>-bit string of weight <m>k</m> is the output of the function at least once).
          </li>
          <li>
            That every <m>y \in Y</m> is the image of at most one <m>x \in X</m> (i.e., that no <m>n</m>-bit string of weight <m>k</m> is the output of the function more than once.)
          </li>
        </ol>
        The first two conditions guarantee that <m>f</m> will be a function.  The third says that <m>f</m> is onto (a surjection).  The fourth says that <m>f</m> is one-to-one (an injection).
      </p>

      <p>
        Let's do this.  First, since elements in <m>X</m> contain <m>k</m> <em>R</em>'s and <m>n-k</m> <em>U</em>'s, applying the rule for <m>f</m> will result in a bit string containing <m>k</m> 1's and <m>n-k</m> 0's, for a total length of <m>n</m>.  Thus each element of <m>X</m> will be sent to an element of <m>Y</m>.  Further, it is not possible for an element of <m>X</m> to be sent to more than one element of <m>Y</m> since our procedure is well defined.
      </p>

      <p>
        To show that <m>f</m> is surjective, consider an arbitrary <m>y \in Y</m>.  If we replace each 1 with an <em>R</em> and each 0 with a <em>U</em>, then we get an element <m>x \in X</m> (because of the length of weight of the strings) and then <m>f(x) = y</m>.
      </p>

      <p>
        Finally, to show that <m>f</m> is injective, consider <m>x_1, x_2 \in X</m> and suppose <m>x_1 \ne x_2</m>.  Then there is a first position in which they differ (a point on the lattice path where one path goes right and the other goes up).  But then this bit will be different in <m>f(x_1)</m> and <m>f(x_2)</m>.
      </p>
    </solution>
  </example>

  

  <exploration>
    <statement>
      <p>
        Define a bijection <m>f:X \to Y</m> where <m>X</m> is the set of <m>n</m>-bit strings of weight <m>k</m> and <m>Y</m> is set of <m>k</m>-element subsets of <m>[n] = \{1,2,3,\ldots, n\}</m>.  Again, prove that <m>f</m> is a bijection.
      </p>
    </statement>
  </exploration>

  <exploration>
    <statement>
      <p>
        Can you now conclude that the number of lattice paths from <m>(0,0)</m> to <m>(k,n-k)</m> is the same as the number of <m>k</m>-element subsets of <m>[n]</m>?  Can you easily give the bijection (and be sure it is really a bijection)?
      </p>
    </statement>
    <hint>
      <p>
        What can you say about the composition of two bijections?
      </p>
    </hint>
  </exploration>

  <p>
    What the example and problems above say is that all these counting questions correspond to each other.  But why do the answers always appear in Pascal's triangle?  To answer this, we need to start with a definition for the numbers in Pascal's triangle.
  </p>

  <p>
    First, some notation: let's write <m>\binom{n}{k}</m> for the <m>k</m>th entry in row <m>n</m>.  For both <m>n</m> and <m>k</m>, start counting at 0.  So for example <m>\binom{5}{1} = 5</m>, and <m>\binom{n}{0} = \binom{n}{n} = 1</m> for all <m>n</m> (or at least the ones we can see).  We will read <m>\binom{n}{k}</m> as <q><m>n</m> choose <m>k</m></q> for reasons that will become clear soon.
  </p>

  <p>
    Now we need to decide what <m>\binom{n}{k}</m> should be defined as.  It is not enough to simply define it as the specific entry in Pascal's triangle, since we haven't yet defined Pascal's triangle (we will want to define Pascal's triangle as the triangle of the numbers <m>\binom{n}{k}</m>).  Here are some choices:
  </p>

  <assemblage>
    <title>Possible Definitions for <m>\binom{n}{k}</m></title>
    <p>
      <idx><h>binomial coefficients</h></idx> For each integer <m>n \ge 0</m> and integer <m>k</m> with <m>0 \le k \le n</m> the number
      <me>
        {n\choose k},
      </me>
      read <q><m>n</m> choose <m>k</m></q> is:
      <ol>
        <li>the number of <m>n</m>-bit strings of weight <m>k</m>, that is, <m>{n\choose k} = |\B^n_k|</m>.</li>
        <li><m>{n \choose k}</m> is the number of subsets of a set of size <m>n</m> each with cardinality <m>k</m>.</li>
        <li><m>{n \choose k}</m> is the number of lattice paths of length <m>n</m> containing <m>k</m> steps to the right.</li>
        <li><m>{n \choose k}</m> is the coefficient of <m>x^ky^{n-k}</m> in the expansion of <m>(x+y)^n</m>.</li>
        <li><m>{n \choose k}</m> is the number of ways to select <m>k</m> objects from a total of <m>n</m> objects.</li>
        <li>
          <p>
            <m>\binom{n}{0} = \binom{n}{n} = 1</m> and for all <m>n \ge 1</m> and <m>1 \lt k \lt n</m> we have <m>\binom{n}{k} = \binom{n-1}{k-1} + \binom{n-1}{k}</m>.
          </p>
        </li>
      </ol>
    </p>
  </assemblage>

  <p>
    You have already proved that choices 1, 2 and 3 are equivalent, and we have good reason to believe these are also equivalent to choice 4.
  </p>

  <p>
    What about choice 5?  This is new, although not really, as it captures all of the previous four: Each of our counting problems above can be viewed in this way:
    <ul>
      <li>
        <p>
          How many bit strings have length 5 and weight 3?  We must choose <m>3</m> of the 5 bits to be 1's.  There are <m>{5 \choose 3}</m> ways to do this, so there are <m>{5 \choose 3}</m> such bit strings.
        </p>
      </li>
      <li>
        <p>
        How many subsets of <m>\{1,2,3,4,5\}</m> contain exactly 3 elements?  We must choose <m>3</m> of the 5 elements to be in our subset.  There are <m>{5 \choose 3}</m> ways to do this, so there are <m>{5 \choose 3}</m> such subsets.
        </p>
      </li>
      <li>
        <p>
        How many lattice paths are there from (0,0) to (3,2)?  We must choose 3 of the 5 steps to be towards the right.  There are <m>{5 \choose 3}</m> ways to do this, so there are <m>{5 \choose 3}</m> such lattice paths.
        </p>
      </li>
      <li>
        <p>
        What is the coefficient of <m>x^3y^2</m> in the expansion of <m>(x+y)^5</m>?  We must choose 3 of the 5 copies of the binomial to contribute an <m>x</m>.  There are <m>{5 \choose 3}</m> ways to do this, so the coefficient is <m>{5 \choose 3}</m>.
        </p>
      </li>
    </ul>
  </p>

  <p>
    In fact, choice 5 is usually taken as the definition of <m>\binom{n}{k}</m>, which is why we say <m>n</m> <em>choose</em> <m>k</m>.  Although interestingly enough, the other common name for <m>\binom{n}{k}</m> is a <term>binomial coefficient</term>, which refers to the coefficients of the binomial <m>(x+y)^n</m>.
  </p>


<!-- TODO: finish this off and relate it to pascal's triangle -->

  <p>
    What does all this have to do with Pascal's triangle though?  You might think of the entries in the triangle as the result of adding the two entries above it.  That is, Pascal's triangle contains those numbers described by choice 6 above.
  </p>


      <assemblage>
        <title>Recurrence relation for <m>{n \choose k}</m></title>
        <p>
          For any <m>n \ge 1</m> and <m>0 \lt k \lt n</m>:
          <me>
            {n \choose k} = {n-1 \choose k-1} + {n-1 \choose k}.
          </me>
        </p>
      </assemblage>

      <p>
        The last piece of the puzzle is to connect this definition to all the others.  Of course given the work done above, it would be enough to prove that any one of the models for binomial coefficients match the recurrence for Pascal's triangle, but it is instructive to check all four.
      </p>

      <example>
        <statement>
          <p>
            Prove that bit strings satisfy the same recurrence as Pascal's triangle.  That is prove that <m>|\B^n_k| = |\B^{n-1}_{k-1}| + |\B^{n-1}_k|</m>.
          </p>
        </statement>
        <solution>
          <p>
            Partition the <m>n</m>-bit strings of weight <m>k</m> into two disjoint sets: those that start with a 0 and those that start with a 1.  Consider the remainder of each bit string (after that first bit). Each <m>n</m>-bit string that starts with a 1 ends with an <m>(n-1)</m>-bit string of weight <m>k-1</m>.  There are <m>|\B^{n-1}_{k-1}|</m> of these.
            Each <m>n</m>-bit string that starts with a 0 ends with an <m>(n-1)</m>-bit string of weight <m>k</m>.  There are <m>|\B^{n-1}_k|</m> of these.  So all together <m>|\B^n_k| = |\B^{n-1}_{k-1}| + |\B^{n-1}_k|</m>.
          </p>
        </solution>
      </example>
      
      <exploration>
        <task>
          <p>
            Prove that subsets satisfy the same recurrence as Pascal's triangle. Make sure you clearly state what you are proving.
          </p>
        </task>
        <task>
          <p>
            Prove that lattice paths satisfy the same recurrence as Pascal's triangle.  What exactly do you need to prove here?
          </p>
        </task>
        <task>
          <p>
            Prove that binomial coefficients (the actual coefficients of the expansion of the binomial <m>(x+y)^n</m>) satisfy the same recurrence as Pascal's triangle.
          </p>
        </task>
      </exploration>


      <p>
        At last we can rest easy that we can use Pascal's triangle to calculate binomial coefficients and as such find numeric values for the answers to counting questions. How many pizza's containing three distinct toppings can you make if the pizza place offers 10 toppings?  Well the answer should be <m>\binom{10}{3}</m>, and Pascal's triangle says that is 120.
      </p>








  <!-- <xi:include href="exercises/counting-binom.ptx"/> -->

</section>
