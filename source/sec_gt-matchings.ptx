<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec_matchings">
<title>Matching in Bipartite Graphs</title>
<p>
  In any <term>matching</term> is a subset <m>M</m> of the edges for which no two edges of <m>M</m> are incident to a common vertex.  If every vertex belongs to exactly one of the edges, we say the matching is <term>perfect</term>. Our goal is to discover some criterion for when a bipartite graph has a prefect matching.
</p>

<p>
  <idx><h>matching</h></idx>
Suppose you have a bipartite graph <m>G</m>. This will consist of two sets of vertices <m>A</m> and <m>B</m> with some edges connecting some vertices of <m>A</m> to some vertices in <m>B</m> (but of course, no edges between two vertices both in <m>A</m> or both in <m>B</m>). A <term>matching</term> of <m>G</m> is a set of <term>independent edges</term>, meaning no two edges in the set are adjacent.  If every vertex in <m>G</m> is incident to exactly one edge in the matching, we call the matching <term>perfect</term>.
If a bipartite graph has a perfect matching, then <m>\card{A} = \card{B}</m>, but in general, we could have a <term>matching of <m>A</m></term>, which will mean that every vertex in <m>A</m> is incident to an edge in the matching.
</p>

<p>
Some context might make this easier to understand. Think of the vertices in <m>A</m> as representing students in a class, and the vertices in <m>B</m> as representing presentation topics. We put an edge from a vertex <m>a \in A</m> to a vertex <m>b \in B</m> if student <m>a</m> would like to present on topic <m>b</m>. Of course, some students would want to present on more than one topic, so their vertex would have degree greater than 1. As the teacher, you want to assign each student their own unique topic. Thus you want to find a matching of <m>A</m>: you pick some subset of the edges so that each student gets matched up with exactly one topic, and no topic gets matched to two students.<fn>The standard example for matchings used to be the <em>marriage problem</em> in which <m>A</m> consisted of the men in the town, <m>B</m> the women, and an edge represented a marriage that was agreeable to both parties.  A matching then represented a way for the town elders to marry off everyone in the town, no polygamy allowed.</fn>
</p>
<activity>

<statement>
  <p>
  Does the graph below contain a perfect matching? If so, find one.
  </p>
  <sidebyside width="50%">
    <image>
    <latex-image>\begin{tikzpicture}
    \foreach \x in {0,...,5} {
     \coordinate (a\x) at (\x,0);
     \coordinate (b\x) at (\x,2);
     \draw (a\x) \v (b\x) \v;
     }
    \draw (a0) -- (b0) (a0) -- (b1) (a0) -- (b5);
    \draw (a1) -- (b0) (a1) -- (b3);
    \draw (a2) -- (b1) (a2) -- (b2) (a2) -- (b3);
    \draw (a3) -- (b0) (a3) -- (b5);
    \draw (a4) -- (b2) (a4) -- (b3) (a4) -- (b4) (a4) -- (b5);
    \draw (a5) -- (b4);
    \end{tikzpicture}</latex-image>
    </image>
  </sidebyside>
</statement>
</activity>

<p>
The question is: when does a bipartite graph contain a matching of <m>A</m>? To begin to answer this question, consider what could prevent the graph from containing a matching. This will not necessarily tell us a condition when the graph <em>does</em> have a matching, but at least it is a start.
</p>


<activity>
<statement>
  <p>
  Draw as many fundamentally different examples of bipartite graphs which do NOT have perfect matchings. Your goal is to find all the possible obstructions to a graph having a perfect  matching. Write down the <em>necessary</em> conditions for a graph to have a matching (that is, fill in the blank: If a graph has a matching, then <fillin/>). Then ask yourself whether these conditions are sufficient (is it true that if <fillin/>, then the graph has a matching?).
  </p>
</statement>
</activity>

<activity>
  <statement>
    <p>
      Find a matching of the bipartite graphs below or explain why no matching exists.
    </p>

      <sidebyside widths="20% 30% 40%" margins="auto" valign="bottom">
        <image>
          <latex-image>
            \begin{tikzpicture}
            \coordinate (a) at (0,0);
            \coordinate (A) at (0,1);
            \coordinate (b) at (1,0);
            \coordinate (B) at (1,1);
            \coordinate (c) at (2,0);
            \coordinate (C) at (2,1);
            \draw (a) \v -- (B) \v -- (c) \v -- (C) \v -- (a) \v -- (A)\v -- (b) \v;
            \end{tikzpicture}
          </latex-image>
        </image>
        <image>
          <latex-image>
            \begin{tikzpicture}
              \coordinate (a) at (0,0);
              \coordinate (A) at (0,1);
              \coordinate (b) at (1,0);
              \coordinate (B) at (1,1);
              \coordinate (c) at (2,0);
              \coordinate (C) at (2,1);
              \coordinate (d) at (3,0);
              \coordinate (D) at (3,1);
              \draw (a) \v -- (A) \v (b) \v -- (B) \v (c) \v -- (C) \v (d) \v (D)\v;
              \draw (a) -- (C) -- (b) -- (D) (A) -- (c) (A) -- (d) -- (C);
            \end{tikzpicture}
          </latex-image>
        </image>
        <image>
          <latex-image>
            \begin{tikzpicture}
              \coordinate (a) at (0,0);
              \coordinate (A) at (0,1);
              \coordinate (b) at (1,0);
              \coordinate (B) at (1,1);
              \coordinate (c) at (2,0);
              \coordinate (C) at (2,1);
              \coordinate (d) at (3,0);
              \coordinate (D) at (3,1);
              \coordinate (e) at (4,0);
              \coordinate (E) at (4,1);
              \draw (a) \v (A) \v (b) \v (B) \v (c) \v (C) \v (d) \v (D)\v (e)\v (E) \v;
              \draw (a) -- (A) (a) -- (B) (A) -- (b) (A) -- (c) (b) -- (C) (B) -- (c) -- (D) (c) -- (E) (C) -- (d) -- (E) (D) -- (e) -- (E);
            \end{tikzpicture}
          </latex-image>
        </image>
      </sidebyside>
  </statement>
  <solution>
    <p>
      The first and third graphs have a matching, shown in bold (there are other matchings as well). The middle graph does not have a matching. If you look at the three circled vertices, you see that they only have two neighbors, which violates the matching condition <m>\card{N(S)} \ge \card{S}</m> (the three circled vertices form the set <m>S</m>).
    </p>

      <sidebyside widths="20% 30% 40%" margins="auto" valign="bottom">
        <image>
          <latex-image>
            \begin{tikzpicture} \coordinate (a) at (0,0); \coordinate (A) at (0,1); \coordinate (b) at (1,0); \coordinate (B) at (1,1); \coordinate (c) at (2,0); \coordinate (C) at (2,1); \draw (a) \v -- (B) \v -- (c) \v -- (C) \v -- (a) \v -- (A)\v -- (b) \v; \draw[very thick] (a) -- (C) (A) -- (b) (c) -- (B); \end{tikzpicture}
          </latex-image>
        </image>
        <image>
          <latex-image>
            \begin{tikzpicture} \coordinate (a) at (0,0); \coordinate (A) at (0,1); \coordinate (b) at (1,0); \coordinate (B) at (1,1); \coordinate (c) at (2,0); \coordinate (C) at (2,1); \coordinate (d) at (3,0); \coordinate (D) at (3,1); \draw (a) \v -- (A) \v (b) \v -- (B) \v (c) \v -- (C) \v (d) \v (D)\v; \draw (a) -- (C) -- (b) -- (D) (A) -- (c) (A) -- (d) -- (C); \draw[dashed] (a) circle (7pt) (c) circle (7pt) (d) circle (7pt); \end{tikzpicture}
          </latex-image>
        </image>
        <image>
          <latex-image>
            \begin{tikzpicture} \coordinate (a) at (0,0); \coordinate (A) at (0,1); \coordinate (b) at (1,0); \coordinate (B) at (1,1); \coordinate (c) at (2,0); \coordinate (C) at (2,1); \coordinate (d) at (3,0); \coordinate (D) at (3,1); \coordinate (e) at (4,0); \coordinate (E) at (4,1); \draw (a) \v (A) \v (b) \v (B) \v (c) \v (C) \v (d) \v (D)\v (e)\v (E) \v; \draw (a) -- (A) (a) -- (B) (A) -- (b) (A) -- (c) (b) -- (C) (B) -- (c) -- (D) (c) -- (E) (C) -- (d) -- (E) (D) -- (e) -- (E); \draw[very thick] (a) -- (A) (b) -- (C) (c) -- (B) (d) -- (E) (e) -- (D); \end{tikzpicture}
          </latex-image>
        </image>
      </sidebyside>
  </solution>
</activity>


<p>
One way <m>G</m> could not have a matching is if there is a vertex in <m>A</m> not adjacent to any vertex in <m>B</m> (so having degree 0). What else? What if two students both like the same one topic, and no others? Then after assigning that one topic to the first student, there is nothing left for the second student to like, so it is very much as if the second student has degree 0. Or what if three students like only two topics between them. Again, after assigning one student a topic, we reduce this down to the previous case of two students liking only one topic. We can continue this way with more and more students.
<!-- \todo{write exercise asking for a proof by induction for this} -->
</p>


<p>
It should be clear at this point that if there is every a group of <m>n</m> students who as a group like <m>n-1</m> or fewer topics, then no matching is possible. This is true for any value of <m>n</m>, and any group of <m>n</m> students.
</p>

<p>
To make this more graph-theoretic, say you have a set <m>S \subseteq A</m> of vertices. Define <m>N(S)</m><notation><usage>N(S)</usage><description>the set of neighbors of <m>S</m>.</description></notation> to be the set of all the <term>neighbors</term><idx><h>neighbors</h></idx> of vertices in <m>S</m>. That is, <m>N(S)</m> contains all the vertices (in <m>B</m>) which are adjacent to at least one of the vertices in <m>S</m>. (In the student/topic graph, <m>N(S)</m> is the set of topics liked by the students of <m>S</m>.) Our discussion above can be summarized as follows:
</p>
<lemma>
<title>Matching Condition</title>
<p>
<idx><h>matching condition</h></idx>
If a bipartite graph <m>G = \{A, B\}</m> has a matching of <m>A</m>, then
<me>
  |N(S)| \ge |S|
</me>
for all <m>S \subseteq A</m>.
</p>
</lemma>

<activity>
  <statement>
    <p>
      Write a careful proof of the matching condition above.
    </p>
  </statement>
</activity>

<p>
Is the converse true? Suppose <m>G</m> satisfies the matching condition <m>|N(S)| \ge |S|</m> for all <m>S \subseteq A</m> (every set of vertices has at least as many neighbors than vertices in the set). Does that mean that there is a matching? Surprisingly, yes. The obvious necessary condition is also sufficient.<fn>This happens often in graph theory.  If you can avoid the obvious counterexamples, you often get what you want.</fn> This is a theorem first proved by Philip Hall in 1935.<fn>There is also an infinite version of the theorem which was proved by the unrelated Marshal Hall, Jr.</fn>
</p>

<theorem xml:id="thm-hallmarriage">
<title>Hall's Marriage Theorem</title>
<statement>
<p>
<idx><h>Hall's Marriage Theorem</h></idx>
Let <m>G</m> be a bipartite graph with sets <m>A</m> and <m>B</m>. Then <m>G</m> has a matching of <m>A</m> if and only if
<me>
  |N(S)| \ge |S|
</me>
for all <m>S \subseteq A</m>.
</p>
</statement>
</theorem>

<p>
There are a few different proofs for this theorem; we will consider one that gives us practice thinking about paths in graphs.
</p>

<activity>
  <statement>
    <p>
      Every bipartite graph (with at least one edge) has a matching, even if it might not be perfect.  Thus we can look for the largest matching in a graph.  If that largest matching includes all the vertices, we have a perfect matching.
    </p>

    <p>
      Your <q>friend</q> claims that she has found the largest matching for the graph below (her matching is in bold). She explains that no other edge can be added, because all the edges not used in her partial matching are connected to matched vertices. Is she correct?
    </p>

      <sidebyside width="40%">
        <image>
          <latex-image>

      \begin{tikzpicture}
      \foreach \x in {0,...,4} {
       \coordinate (a\x) at (\x,0);
       \coordinate (b\x) at (\x,2);
       \draw (a\x) \v (b\x) \v;
       }
       \draw[line width=2pt] (a0) -- (b0) (a1) -- (b1) (a3) -- (b2) (a4) -- (b4);
       \draw[very thin] (a0) -- (b1) (a1) -- (b2) (a2)--(b0)  (a0)--(b2) (a3) -- (b4) (a4) -- (b3);
      \end{tikzpicture}
          </latex-image>
        </image>
      </sidebyside>
  </statement>
</activity>


<activity>
  <introduction>
    <p>
      One way you might check to see whether a partial matching is maximal is to construct an <term>alternating path</term>. This is a path whose adjacent edges alternate between edges in the matching and edges not in the matching (no edge can be used more than once, since this is a path). If an alternating path starts and stops with vertices that are <em>not</em> matched, (that is, these vertices are not incident to any edge in the matching) then the path is called an <term>augmenting path</term>.
    </p>
  </introduction>
  <task>

        <statement>
    <p>
      Find the largest possible alternating path for the matching of your friend's graph.  Is it an augmenting path?  How would this help you find a larger matching?
    </p>
      <sidebyside width="40%">
        <image>
          <latex-image>

            \begin{tikzpicture}
            \foreach \x in {0,...,4} {
             \coordinate (a\x) at (\x,0);
             \coordinate (b\x) at (\x,2);
             \draw (a\x) \v (b\x) \v;
             }
             \draw[line width=2pt] (a0) -- (b0) (a1) -- (b1) (a3) -- (b2) (a4) -- (b4);
             \draw[very thin] (a0) -- (b1) (a1) -- (b2) (a2)--(b0) (a0)--(b2) (a3) -- (b4) (a4) -- (b3);
            \end{tikzpicture}

          </latex-image>
        </image>
      </sidebyside>

  </statement>
</task>
  <task>
    <statement>
      <p>
        Find the largest possible alternating path for the matching below.  Are there any augmenting paths?  Is the matching the largest one that exists in the graph?
      </p>

        <sidebyside width="50%">
          <image>
            <latex-image>

              \begin{tikzpicture}
              \foreach \x in {0,...,5} {
               \coordinate (a\x) at (\x,0);
               \coordinate (b\x) at (\x,2);
               \draw (a\x) \v (b\x) \v;
               }
               \draw[line width=2pt] (a0) -- (b1) (a1) -- (b2) (a2) -- (b0) (a3) -- (b4) (a4) -- (b5);
               \draw[very thin] (a0) -- (b2) (a1) -- (b0) (a2)--(b1) (a2) -- (b3) (a2) -- (b4) (a3) -- (b2) (a4) -- (b2) (a4)-- (b3) (a4) -- (b4) (a5) -- (b4) (a5)--(b5);
              \end{tikzpicture}

            </latex-image>
          </image>
        </sidebyside>
    </statement>
    </task>
</activity>

<p>
  If a graph does not have a perfect matching, then any of its maximal matchings must leave a vertex unmatched.  In particular, there cannot be an augmenting path starting at such a vertex (otherwise the maximal matching would not be maximal).  Thus to prove <xref ref="thm-hallmarriage"/>, it would be sufficient to prove that the matching condition guarantees that every non-perfect matching has an augmenting path.
</p>

<activity>
  <introduction>
    <p>
      Let <m>M</m> be a matching of <m>G</m> that leaves a vertex <m>a \in A</m> unmatched.  We will find an augmenting path starting at <m>a</m>.
    </p>
  </introduction>
  <task>
    <statement>
      <p>
        Consider all the alternating paths starting at <m>a</m> and ending in <m>A</m>.  Are any augmenting paths?
      </p>
    </statement>
  </task>
  <task>
    <statement>
      <p>
        Let <m>A'</m> be all the end vertices of alternating paths from above.  Let <m>S = A' \cup \{a\}</m>.  Explain why there must be some <m>b \in B</m> that is adjacent to a vertex in <m>S</m> but not part of any of the alternating paths.
      </p>
    </statement>
  </task>
  <task>
    <statement>
      <p>
        Finish the proof.
      </p>
    </statement>
    <hint>
      <p>
        There is not much more to say now, except why <m>b</m> is not incident to any edge in <m>M</m>, and what the augmenting path would be.
      </p>
    </hint>
  </task>
</activity>

<!-- <activity>
  <introduction>
    <p>
      We say that a set of vertices <m>A \subseteq V</m> is a <term>vertex cover</term>  if every edge of the graph is incident to a vertex in the cover (so a vertex cover covers the <em>edges</em>). Since <m>V</m> itself is a vertex cover, every graph has a vertex cover. The interesting question is about finding a <term>minimal</term> vertex cover, one that uses the fewest possible number of vertices.
    </p>
  </introduction>
  <task>
    <statement>
      <p>
        Suppose you had a matching of a graph.  How can you use that to get a minimal vertex cover?  Will your method always work?
      </p>
    </statement>
  </task>
  <task>
    <statement>
      <p>
        Suppose you had a minimal vertex cover for a graph.  How can you use that to get a matching?  Will your method always work?
      </p>
    </statement>
  </task>
  <task>
    <statement>
      <p>
        What is the relationship between the size of the minimal vertex cover and the size of the maximal matching in a graph?
      </p>
    </statement>
  </task>
</activity> -->

<p>
In addition to its application to marriage and student presentation topics, matchings have applications all over the place. We conclude with one such example.
</p>
<activity>
<statement>
<p>
Suppose you deal 52 regular playing cards into 13 piles of 4 cards each. Prove that you can always select one card from each pile to get one of each of the 13 card values Ace, 2, 3, <ellipsis/>, 10, Jack, Queen, and King.
</p>
</statement>
<hint>
  <p>
    Take <m>A</m> to be the 13 piles and <m>B</m> to be the 13 values.  What would the matching condition need to say, and why is it satisfied.
  </p>
</hint>
<solution>
<p>
Doing this directly would be difficult, but we can use the matching condition to help. Construct a graph <m>G</m> with 13 vertices in the set <m>A</m>, each representing one of the 13 card values, and 13 vertices in the set <m>B</m>, each representing one of the 13 piles. Draw an edge between a vertex <m>a \in A</m> to a vertex <m>b \in B</m> if a card with value <m>a</m> is in the pile <m>b</m>. Notice that we are just looking for a matching of <m>A</m>; each value needs to be found in the piles exactly once.
</p>

<p>
We will have a matching if the matching condition holds. Given any set of card values (a set <m>S \subseteq A</m>) we must show that <m>|N(S)| \ge |S|</m>. That is, the number of piles that contain those values is at least the number of different values. But what if it wasn't? Say <m>|S| = k</m>. If <m>|N(S)| \lt  k</m>, then we would have fewer than <m>4k</m> different cards in those piles (since each pile contains 4 cards). But there are <m>4k</m> cards with the <m>k</m> different values, so at least one of these cards must be in another pile, a contradiction. Thus the matching condition holds, so there is a matching, as required.
</p>
</solution>
</activity>


<activity>
    <introduction>
      <p>
        For many applications of matchings, it makes sense to use bipartite graphs. You might wonder, however, whether there is a way to find matchings in graphs in general.
      </p>
    </introduction>

    <task>
        <statement>
        <p>
          For which <m>n</m> does the complete graph <m>K_n</m> have a matching?
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Prove that if a graph has a matching, then <m>\card{V}</m> is even.
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          Is the converse true?  That is, do all graphs with <m>\card{V}</m> even have a matching?
        </p>
      </statement>
    </task>
    <task>
      <statement>
        <p>
          What if we also require the matching condition?  Prove or disprove: If a graph with an even number of vertices satisfies <m>\card{N(S)} \ge \card{S}</m> for all <m>S \subseteq V</m>, then the graph has a matching.
        </p>
      </statement>
    </task>
</activity>


</section>
